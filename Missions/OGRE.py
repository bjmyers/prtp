import numpy as np
from prtp.Sources import Subannulus
from prtp.WolterOptic import WolterModule
from prtp.Grating import Grating
from prtp.GratingStack import GratingStack
from prtp.Combination import Combination
import prtp.conicsolve as conic
import astropy.units as u


class OgreMirrorModule:
    '''
    Class OgreMirrorModule:
    Stores the parameters for the Mirror Module for OGRE
    
    To get the WolterModule object, use the following code:
    >> from OgreComponents import OgreMirrorModule
    >> mirror = OgreMirrorModule()
    '''
    def __new__(cls):
        r0s = np.array([165., 167.5503, 170.1193, 172.7023,
                        175.3143, 177.9404, 180.5859, 183.2509,
                        185.9355, 188.6398, 191.3640, 194.1083]) * u.mm
        
        z0s = np.ones(12) * 3500. * u.mm
        ax_lens = np.ones(12) * 100 * u.mm
        mir_seps = np.ones(12) * 5 * u.mm
        
        return WolterModule(r0=r0s,z0=z0s,axial_length=ax_lens,mirror_sep=mir_seps,beckmann_scatter=True,ripple=1.48e-5)


class OgreSource:
    '''
    Class OgreSource:
    Stores the parameters for the source for OGRE
    
    Inputs:
    num - The number of photons you want to generate from the Source
    dphi - The angular extend of the subannulu
    
    To get the WolterModule object, use the following code:
    >> from OgreComponents import OgreSource
    >> mirror = OgreSource(n=100,dphi=50*u.deg)
    Note: This above code uses custom arguments, which are possible but the 
        default arguments are standard and recommended.
    '''
    @u.quantity_input(dphi=u.rad)
    def __new__(cls,num=1000,dphi = 60*u.deg):
        
        # Define final flight variables for OGRE mirror module.
        z0 = 3500. * u.mm  # Z-coordinate of P-H intersection plane.
        r_int = 165. * u.mm # R-distance of P-H intersection from central axis
        mirror_length = 100. * u.mm  # Axial length of mirror segments.
        mirror_sep = 5. * u.mm  # Axial seperation of mirror segments.
        thickness = 1. * u.mm  # Thickness of mirror segments in y-direction.
        
        min_radial_extent = conic.primrad(z0 + mirror_sep/2, r_int, z0)
        max_radial_extent = conic.primrad(z0 + mirror_length + mirror_sep/2,
                                        r_int, z0)
        
        # Define subannulus source.
        return Subannulus(rin = min_radial_extent, rout = max_radial_extent,
                                dphi = dphi.to('rad'), num = num, zhat=1.)


class OgreGratingModule:
    '''
    Class OgreMirrorModule:
    Stores the parameters for the Grating Module for OGRE
    
    To get the Combination object, use the following code:
    >> from OgreComponents import OgreGratingModule
    >> gratModule = OgreGratingModule()
    '''
    
    def __new__(cls):
        
        # Generate Left Stack first:
        x = np.array([37.5,37.5,37.5,37.5,37.5,37.5,37.5,37.5,37.5,37.5,37.5,
        37.5,37.5,37.5,37.5,37.5,37.5,37.5,37.5,37.5,37.5,37.5,37.5]) * u.mm
        
        y = np.array([135.40758935,137.5899757316,139.7723621131,141.9547484947,
        144.1371348762,146.3195212578,148.5019076393,150.6842940209,
        152.8666804024,155.049066784,157.2314531655,159.4138395471,
        161.5962259286,163.7786123102,165.9609986917,168.1433850733,
        170.3257714548,172.5081578364,174.6905442179,176.8729305995,
        179.055316981,181.2377033626,183.4200897441]) * u.mm

        z = np.array([3247.4752729476,3247.4319228236,3247.3931891623,
        3247.3575113713,3247.3236107118,3247.2904902988,3247.257435101,
        3247.2240119406,3247.1900694937,3247.1557382898,3247.1214307125,
        3247.0878409986,3247.0559452388,3247.0270013776,3247.002549213,
        3246.9844103967,3246.9746884341,3246.9757686843,3246.99031836,
        3247.0212865277,3247.0719041074,3247.145683873,3247.2464204519]) * u.mm

        nx = np.zeros(len(x))

        ny = np.array([0.9998799221,0.9998693257,0.9998582734,0.9998467651,
        0.9998348009,0.9998223812,0.9998095061,0.9997961764,0.9997823926,
        0.9997681553,0.9997534656,0.9997383242,0.9997227322,0.9997066907,
        0.9996902007,0.9996732635,0.99965588,0.9996380516,0.9996197792,
        0.9996010639,0.9995819067,0.9995623085,0.9995422699])

        nz = np.array([-0.015496494,-0.0161657516,-0.0168354742,-0.01750561,
        -0.0181761072,-0.0188469134,-0.0195179768,-0.0201892458,-0.0208606698,
        -0.0215321991,-0.0222037856,-0.0228753828,-0.0235469466,-0.0242184349,
        -0.0248898085,-0.0255610312,-0.0262320702,-0.0269028963,-0.0275734843,
        -0.0282438134,-0.0289138674,-0.029583635,-0.0302531102])

        sx = np.array([0.0039550362,0.0039554622,0.0039557423,0.0039558963,
        0.0039559427,0.003955899,0.0039557817,0.0039556062,0.0039553868,
        0.0039551366,0.0039548681,0.0039545921,0.0039543189,0.0039540574,
        0.0039538155,0.0039536001,0.003953417,0.003953271,0.0039531658,
        0.0039531038,0.0039530867,0.003953115,0.003953188])

        sy = np.array([-0.0154963728,-0.0161656252,-0.0168353425,-0.0175054731,
        -0.018175965,-0.018846766,-0.0195178241,-0.0201890879,-0.0208605066,
        -0.0215320307,-0.0222036119,-0.022875204,-0.0235467625,-0.0242182456,
        -0.0248896139,-0.0255608314,-0.0262318652,-0.0269026861,-0.0275732689,
        -0.0282435928,-0.0289136415,-0.0295834039,-0.0302528738])

        sz = np.array([-0.9998721019,-0.9998615039,-0.9998504505,-0.9998389417,
        -0.9998269774,-0.9998145579,-0.9998016835,-0.9997883546,-0.9997745717,
        -0.9997603356,-0.999745647,-0.9997305068,-0.999714916,-0.9996988757,
        -0.9996823868,-0.9996654505,-0.9996480679,-0.9996302402,-0.9996119684,
        -0.9995932535,-0.9995740965,-0.9995544983,-0.9995344596])
        
        leftgs = GratingStack()
        
        for i in range(len(x)):
            g = Grating(x=x[i],y=y[i],z=z[i],nx=nx[i],ny=ny[i],nz=nz[i],
            sx=sx[i],sy=sy[i],sz=sz[i],
            d=157.57 * u.nm, fdist = 3250 * u.mm)
            leftgs.addComponent(g)

        
        # Now create the right Grating Stack
        x = np.ones(len(y)) * -37.5 * u.mm
        
        y = np.array([135.40758935,137.5899757316,139.7723621131,141.9547484947,
        144.1371348762,146.3195212578,148.5019076393,150.6842940209,
        152.8666804024,155.049066784,157.2314531655,159.4138395471,
        161.5962259286,163.7786123102,165.9609986917,168.1433850733,
        170.3257714548,172.5081578364,174.6905442179,176.8729305995,
        179.055316981,181.2377033626,183.4200897441,]) * u.mm

        z = np.array([3244.0215074971,3244.2462663527,3244.4584633146,
        3244.6571593834,3244.8416351668,3245.01139088,3245.1661463456,
        3245.3058409933,3245.4306338604,3245.5409035915,3245.6372484385,
        3245.7204862605,3245.7916545242,3245.8520103036,3245.9030302798,
        3245.9464107417,3245.984067585,3246.0181363132,3246.0509720369,
        3246.0851494742,3246.1234629503,3246.1689263981,3246.2247733576,]) * u.mm

        nx = np.zeros(len(x))

        ny = np.array([0.9998793258,0.9998687275,0.9998576732,0.9998461631,
        0.9998341978,0.9998217777,0.9998089038,0.9997955768,0.9997817977,
        0.9997675675,0.9997528872,0.9997377579,0.9997221805,0.9997061559,
        0.9996896848,0.9996727676,0.9996554048,0.9996375963,0.9996193418,
        0.9996006403,0.9995814908,0.9995618914,0.9995418398])

        nz = np.array([-0.0155349249,-0.0162027102,-0.0168710823,-0.0175399577,
        -0.0182092554,-0.0188788972,-0.0195488082,-0.0202189179,-0.0208891607,
        -0.0215594764,-0.0222298113,-0.0229001184,-0.0235703586,-0.024240501,
        -0.0249105237,-0.0255804148,-0.0262501726,-0.0269198066,-0.0275893381,
        -0.028258801,-0.0289282423,-0.0295977229,-0.0302673184])

        sx = np.array([0.0262902805,0.0262893034,0.0262885209,0.026287903,
        0.0262874221,0.0262870527,0.0262867721,0.0262865595,0.0262863966,
        0.0262862676,0.0262861587,0.0262860586,0.0262859585,0.0262858516,
        0.0262857336,0.0262856026,0.0262854589,0.0262853051,0.0262851463,
        0.0262849897,0.0262848451,0.0262847244,0.0262846419])

        sy = np.array([-0.0155295552,-0.0161971102,-0.0168652516,-0.0175338961,
        -0.0182029628,-0.0188723733,-0.019542053,-0.0202119313,-0.0208819425,
        -0.0215520267,-0.02222213,-0.0228922055,-0.0235622142,-0.0242321251,
        -0.0249019164,-0.0255715761,-0.0262411026,-0.0269105053,-0.0275798056,
        -0.0282490373,-0.0289182474,-0.0295874968,-0.030256861])

        sz = np.array([-0.9995337183,-0.9995231494,-0.9995121195,-0.9995006296,
        -0.9994886811,-0.999476275,-0.9994634129,-0.9994500961,-0.9994363261,
        -0.9994221042,-0.9994074318,-0.9993923104,-0.999376741,-0.9993607247,
        -0.9993442624,-0.9993273546,-0.9993100015,-0.9992922032,-0.9992739591,
        -0.9992552683,-0.9992361292,-0.9992165397,-0.9991964972])
        
        rightgs = GratingStack()
        
        for i in range(len(x)):
            g = Grating(x=x[i],y=y[i],z=z[i],nx=nx[i],ny=ny[i],nz=nz[i],
            sx=sx[i],sy=sy[i],sz=sz[i],
            d=157.57 * u.nm, fdist = 3250 * u.mm)
            rightgs.addComponent(g)
        
        module = Combination()
        module.addComponent(leftgs)
        module.addComponent(rightgs)
        return module